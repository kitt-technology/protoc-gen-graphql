// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: books.proto

package books

import (
	context "context"
	graphql "github.com/kitt-technology/protoc-gen-graphql/graphql"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Books_GetBooks_FullMethodName         = "/books.Books/getBooks"
	Books_GetBooksByAuthor_FullMethodName = "/books.Books/getBooksByAuthor"
	Books_GetBooksBatch_FullMethodName    = "/books.Books/getBooksBatch"
)

// BooksClient is the client API for Books service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BooksClient interface {
	GetBooks(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error)
	// Simple batch loader using graphql.BatchRequest
	GetBooksByAuthor(ctx context.Context, in *graphql.BatchRequest, opts ...grpc.CallOption) (*GetBooksByAuthorResponse, error)
	// Custom batch loader with complex request type
	GetBooksBatch(ctx context.Context, in *GetBooksBatchRequest, opts ...grpc.CallOption) (*GetBooksBatchResponse, error)
}

type booksClient struct {
	cc grpc.ClientConnInterface
}

func NewBooksClient(cc grpc.ClientConnInterface) BooksClient {
	return &booksClient{cc}
}

func (c *booksClient) GetBooks(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksResponse)
	err := c.cc.Invoke(ctx, Books_GetBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) GetBooksByAuthor(ctx context.Context, in *graphql.BatchRequest, opts ...grpc.CallOption) (*GetBooksByAuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksByAuthorResponse)
	err := c.cc.Invoke(ctx, Books_GetBooksByAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksClient) GetBooksBatch(ctx context.Context, in *GetBooksBatchRequest, opts ...grpc.CallOption) (*GetBooksBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBooksBatchResponse)
	err := c.cc.Invoke(ctx, Books_GetBooksBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksServer is the server API for Books service.
// All implementations must embed UnimplementedBooksServer
// for forward compatibility.
type BooksServer interface {
	GetBooks(context.Context, *GetBooksRequest) (*GetBooksResponse, error)
	// Simple batch loader using graphql.BatchRequest
	GetBooksByAuthor(context.Context, *graphql.BatchRequest) (*GetBooksByAuthorResponse, error)
	// Custom batch loader with complex request type
	GetBooksBatch(context.Context, *GetBooksBatchRequest) (*GetBooksBatchResponse, error)
	mustEmbedUnimplementedBooksServer()
}

// UnimplementedBooksServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBooksServer struct{}

func (UnimplementedBooksServer) GetBooks(context.Context, *GetBooksRequest) (*GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBooksServer) GetBooksByAuthor(context.Context, *graphql.BatchRequest) (*GetBooksByAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedBooksServer) GetBooksBatch(context.Context, *GetBooksBatchRequest) (*GetBooksBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksBatch not implemented")
}
func (UnimplementedBooksServer) mustEmbedUnimplementedBooksServer() {}
func (UnimplementedBooksServer) testEmbeddedByValue()               {}

// UnsafeBooksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksServer will
// result in compilation errors.
type UnsafeBooksServer interface {
	mustEmbedUnimplementedBooksServer()
}

func RegisterBooksServer(s grpc.ServiceRegistrar, srv BooksServer) {
	// If the following call pancis, it indicates UnimplementedBooksServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Books_ServiceDesc, srv)
}

func _Books_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Books_GetBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).GetBooks(ctx, req.(*GetBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(graphql.BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Books_GetBooksByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).GetBooksByAuthor(ctx, req.(*graphql.BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Books_GetBooksBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).GetBooksBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Books_GetBooksBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).GetBooksBatch(ctx, req.(*GetBooksBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Books_ServiceDesc is the grpc.ServiceDesc for Books service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Books_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books.Books",
	HandlerType: (*BooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBooks",
			Handler:    _Books_GetBooks_Handler,
		},
		{
			MethodName: "getBooksByAuthor",
			Handler:    _Books_GetBooksByAuthor_Handler,
		},
		{
			MethodName: "getBooksBatch",
			Handler:    _Books_GetBooksBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "books.proto",
}
